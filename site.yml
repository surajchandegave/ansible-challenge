---
- name: Setup EC2 instance
  hosts: localhost
  connection: local
  gather_facts: False
  
  vars:
    - image: ami-0c641f2290e9cd048
      region: "ap-southeast-2"
      vpc_subnet_id: subnet-5c74a514
      count: 1
      key_name: my-key
      security_group_name: sec_grp1
      #online_games:
      #- car_game
      #- snake_game
      online_games:
        car_game: https://onehtmlpagechallenge.com/entries/mini_car_game.html
        snake_game: https://onehtmlpagechallenge.com/entries/Snakegame.html
  
  tasks:
  - name: Configure boto and boto3 module
    pip:
      name:
        - boto
        - boto3
      state: present

  - name: Create a new EC2 key
    ec2_key:
      name: "{{ key_name }}"
      region: "{{ region }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
    register: ec2_key_result

  - name: Save private key
    copy: content="{{ ec2_key_result.key.private_key }}" dest="./aws.{{ key_name }}.pem" mode=0600
    when: ec2_key_result.changed

  - name: Create security group
    ec2_group:
      name: "{{ security_group_name }}"
      description: "Sec group for opening SSH and HTTP port"
      region: "{{ region }}"
      rules:
        - proto: tcp
          ports:
            - 22
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on ssh port
        - proto: tcp
          ports:
            - 80
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on http port
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
    register: security_group_result

  - name: Launch instances for hosting online games
    ec2:
      key_name: "{{ key_name }}"
      region: "{{ region }}"
      instance_type: t2.micro
      wait: yes
      group: "{{ security_group_name }}"
      count: "{{ count }}"
      vpc_subnet_id: "{{ vpc_subnet_id }}"
      image: "{{ image }}"
      assign_public_ip: yes
      instance_tags:
        Name: "{{ item.key }}"
        Url: "{{ item.value }}"
        purpose: online_games
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
    loop: "{{ online_games | dict2items }}"
    register: ec2_instances

  - name: Print all available facts
    debug:
      msg: "{{ item[0].public_ip }}"
    loop: "{{ ec2_instances | community.general.json_query('results[*].instances') }}"

  - name: Add instances to host group
    add_host:
      hostname: "{{ item[0].public_ip }}"
      groupname: online_games_instances
      online_game_name: "{{ item[0].tags.Name }}"
      online_game_url: "{{ item[0].tags.Url }}"
      dns_name: "{{ item[0].public_dns_name }}"
    loop: "{{ ec2_instances | community.general.json_query('results[*].instances') }}"

  - name: Wait for SSH to come up
    wait_for:
      host: "{{ item[0].public_dns_name }}"
      port: 22
      state: started
    loop: "{{ ec2_instances | community.general.json_query('results[*].instances') }}"

- name: Setup httpd
  hosts: online_games_instances
  tasks:
  - name: Install httpd
    package:
      name: "{{ item }}"
      state: present
    with_items:
      - httpd
      - hostname
      - mod_ssl
  
  - name: Copy games html
    get_url:
      url: "{{ online_game_url }}"
      dest: "/var/www/html/index.html"

  #- name: Copy snake html
  #  get_url:
  #    url: "{{ online_game_url }}"
  #    dest: "/var/www/html/index.html"
  #  when: online_game_name is search('snake_game')

  - name: start httpd
    service:
      name: httpd
      state: started

  - name: Wait for Http server to come up
    wait_for:
      host: "{{ inventory_hostname }}"
      port: 80
      state: started

  - name: Access online games at below URL
    debug:
      msg: "Access {{ online_game_name }} at http://{{ dns_name }}"
